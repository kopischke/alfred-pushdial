#!/usr/bin/env bash
scriptdir="${0%/*}"

query=($1)
desc="${2:-main phone number}"
code="${3:-%p}"
icon="${4:-vCard.png}"

# Searches beginning with a lower case letter are case insensitive
ucase='[[:upper:]]'
[[ ${query[0]:0:1} =~ $ucase ]] && shopt -u nocasematch || shopt -s nocasematch

blank='^[[:space:]]*$'
if [[ ! "${query[0]}" =~ $blank ]]; then
	# start XML output
	source "$scriptdir"/lib/feedback.sh
	feedback --start
	
	# get Contacts data for query
	names=(); numbers=(); uids=()
	while read -r || [[ -n "$REPLY" ]]; do
		# split names and numbers on UID (as a makeshift record separator)
		# filtering out non-matching names (as contacts itself only accepts a single,
		# unquoted word as its query) and results without a phone number.
		uid_regex='[A-Z0-9]{8}(-[A-Z0-9]{4}){3}-[A-Z0-9]{12}:ABPerson'
		has_phone="(.*) ($uid_regex) (.*) $uid_regex (.+)"
		has_query=".*${query[*]}.*"
		if [[ $REPLY =~ $has_phone ]]; then
			[[ ${BASH_REMATCH[1]} != ' ' ]] && name="${BASH_REMATCH[1]}" || unset name
			uid="${BASH_REMATCH[2]}"
			company="${BASH_REMATCH[4]}"
			number="${BASH_REMATCH[6]}"
			# if we match on name, add company name (if any), and vice versa
			if   [[ $name =~ $has_query ]]; then names+=("$name${company:+ ($company)}")
			elif [[ $company =~ $has_query ]]; then names+=("$company${name:+ – $name}")
			else continue # skip when no full match is found
			fi
			numbers+=("$number")
			uids+=("$uid")
		fi
	done < <("$scriptdir"/contacts -SHs -f "%fn %ln %u %c %u $code" ${query[0]})
	
	# create XML items from matching contact items
	# (check for error message as sends these to stdout)
	if (( ${#names[@]} > 0 )) && [[ ${names[0]} != 'error: no one found' ]]; then
		for (( i=0; i < ${#names[@]}; i++ )); do
			name="${names[$i]}"
			number="${numbers[$i]}"
			uid="${uids[$i]}"
			# deduplicate items
			(( i > 0 )) && [[ $name == "${names[$(($i-1))]}" && $number == "${numbers[$(($i-1))]}" ]] && continue
			# XML output
			text="Dial $desc: $number"
			feedback "$name" --subtitle="$text" --uid="$uid" --action="$number" --valid --icon="$icon"
		done
	else # Create fallback XML item
		title="No matching contacts found"
		text="Action this item to run Alfred default searches for “${query[*]}”."
		arg="alfredsearch:${query[*]}"
		icon='/Applications/Contacts.app'
		feedback "$title" --subtitle="$text" --uid='noresults' --action="$arg" --icon="$icon" --fileicon
	fi
	
	# end XML output
	feedback --end
fi
